import { useRef, useEffect, useState } from "react";
import "../app/globals.css";

import { Canvas, useFrame, useLoader } from "@react-three/fiber";
import {
  Center,
  Environment,
  Backdrop,
  ContactShadows,
  SpotLight,
  useDepthBuffer,
} from "@react-three/drei";
import * as THREE from "three";
import { TextureLoader } from "three/src/loaders/TextureLoader";

export default function App() {
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    // Simulate progress change over time
    const interval = setInterval(() => {
      // Update progress at regular intervals
      // For example, update progress every second
      const newProgress = (progress + 1) % 101; // Increment progress by 1 every second
      setProgress(newProgress);
    }, 1000); // Update progress every second

    return () => clearInterval(interval); // Cleanup interval on component unmount
  }, [progress]); // Re-run effect whenever progress changes


  return (
    <div style={{ width: "100vw", height: "100vh", position: "relative" }}>
      <div
        style={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          position: "absolute",
          top: "0",
          left: "25%",
          width: "100vw",
          height: "100vh",
          zIndex: 1,
          marginTop: "-5em"
        }}
      >
        <div
          style={{
            lineHeight: "1em",
            textAlign: "left",
            fontSize: "4.3em",
            wordBreak: "break-word",
            fontFamily: "Aeonik-Regular",
            color: "rgba(255, 255, 255, 1)",
          }}
        >
          Toda Beleza{" "}
        </div>
        <div
          style={{
            lineHeight: "1em",
            textAlign: "left",
            fontSize: "3.2em",
            fontFamily: "Aeonik-Regular",
            color: "rgba(255, 255, 255, 0.5)",
            marginTop: "0.2em",
          }}
        >
          Rubel{" "}
        </div>
        {/* Progress bar */}
        <div
        style={{
          position: "absolute",
          top: "65%",
          left: "50%",
          transform: "translateX(-50%)",
          width: "25%",
          height: "5px",
          backgroundColor: "rgba(255, 255, 255, 0.2)",
          borderRadius: "5px",
          overflow: "hidden",
        }}
      >
        <div
          style={{
            width: `${progress}%`,
            height: "100%",
            backgroundColor: "#fff",
            transition: "width s ease", // Add smooth transition animation

          }}
        />
      </div>
    </div>


      <Canvas linear shadows>
        <CombinedMeshes />
        <Backdrop
          castShadow
          floor={2}
          position={[0, -4.5, 0]}
          scale={[50, 10, 4]}
        >
          <meshStandardMaterial color="#091227" envMapIntensity={6.5} />
        </Backdrop>
        <ContactShadows
          position={[-0.1, -1.5, -0.58]}
          scale={8}
          blur={3.5}
          opacity={0.5}
        />
        <Environment preset="sunset" background blur={1} />
      </Canvas>
    </div>
  );
}

function CombinedMeshes() {
  const ref = useRef();

  useFrame((state) => {
    const t = state.clock.getElapsedTime();

    // Update rotation and position for the music player mesh
    ref.current.rotation.set(
      Math.cos(t / 4) / 16,
      Math.sin(t / 4) / 16,
      -0 - (1 + Math.sin(t / 1.5)) / 40
    );
    ref.current.position.y = -2 - (2 + Math.sin(t / 2)) / 10;
    ref.current.position.x = -3;
    ref.current.scale.x = 3.8;
    ref.current.scale.y = 3.8;
    ref.current.scale.z = 3.8;
    ref.current.rotation.y = 0.09;

    // Update rotation for the disk mesh to make it spin around its center
    ref.current.children[1].rotation.z = -t;
  });

  const musicPlayerTexture = useLoader(TextureLoader, "Vinyl_Cover-2.png");
  const musicPlayerEnv = useLoader(TextureLoader, "cover_ao 1.png");

  const diskTexture = useLoader(TextureLoader, "disk_texture.png");

  return (
    <group ref={ref}>
      <group>
        <Center top>
          <mesh castShadow>
            <boxGeometry args={[1.3, 1.3, 0.03]} />
            <meshStandardMaterial
              metalness={0.9}
              roughness={0.08}
              map={musicPlayerTexture}
              lightMap={musicPlayerEnv}
              lightMapIntensity={300}
            />
          </mesh>
        </Center>
      </group>

      <group position={[0.4, 0.65, -0.05]}>
        <mesh castShadow rotation={[Math.PI / 2, 0, 0]}>
          <cylinderGeometry args={[0.55, 0.55, 0.0, 128]} />
          <meshStandardMaterial
            metalness={0.9}
            roughness={0.08}
            map={diskTexture}
            lightMap={diskTexture}
          />
        </mesh>
      </group>
    </group>
  );
}
